//
// SurahAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class SurahAPI {
    /**
     Lists all editions for a given format
     
     - parameter surah: (path) Number of surah in Quran 
     - parameter edition: (path) Edition identifier 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSurahByEdition(surah: String, edition: String, completion: @escaping ((_ data: SurahResponse?,_ error: Error?) -> Void)) {
        getSurahByEditionWithRequestBuilder(surah: surah, edition: edition).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Lists all editions for a given format
     
     - parameter surah: (path) Number of surah in Quran 
     - parameter edition: (path) Edition identifier 
     - returns: Observable<SurahResponse>
     */
    open class func getSurahByEdition(surah: String, edition: String) -> Observable<SurahResponse> {
        return Observable.create { observer -> Disposable in
            getSurahByEdition(surah: surah, edition: edition) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Lists all editions for a given format
     - GET /surah/{surah}/{edition}
     - 
     - examples: [{contentType=application/json, example={
  "code" : 0,
  "data" : {
    "number" : 6,
    "englishName" : "englishName",
    "numberOfAyahs" : 1,
    "revelationType" : "revelationType",
    "name" : "name",
    "edition" : {
      "identifier" : "identifier",
      "englishName" : "englishName",
      "name" : "name",
      "format" : "format",
      "language" : "language",
      "type" : "type"
    },
    "ayahs" : [ {
      "number" : 5,
      "audioSecondary" : [ "audioSecondary", "audioSecondary" ],
      "hizbQuarter" : 2,
      "ruku" : 3,
      "manzil" : 7,
      "audio" : "audio",
      "text" : "text",
      "page" : 9,
      "sajda" : true,
      "surah" : {
        "number" : 6,
        "englishName" : "englishName",
        "numberOfAyahs" : 1,
        "revelationType" : "revelationType",
        "name" : "name",
        "englishNameTranslation" : "englishNameTranslation"
      },
      "numberInSurah" : 5,
      "juz" : 2
    }, {
      "number" : 5,
      "audioSecondary" : [ "audioSecondary", "audioSecondary" ],
      "hizbQuarter" : 2,
      "ruku" : 3,
      "manzil" : 7,
      "audio" : "audio",
      "text" : "text",
      "page" : 9,
      "sajda" : true,
      "surah" : {
        "number" : 6,
        "englishName" : "englishName",
        "numberOfAyahs" : 1,
        "revelationType" : "revelationType",
        "name" : "name",
        "englishNameTranslation" : "englishNameTranslation"
      },
      "numberInSurah" : 5,
      "juz" : 2
    } ],
    "englishNameTranslation" : "englishNameTranslation"
  },
  "status" : "status"
}}]
     
     - parameter surah: (path) Number of surah in Quran 
     - parameter edition: (path) Edition identifier 

     - returns: RequestBuilder<SurahResponse> 
     */
    open class func getSurahByEditionWithRequestBuilder(surah: String, edition: String) -> RequestBuilder<SurahResponse> {
        var path = "/surah/{surah}/{edition}"
        let surahPreEscape = "\(surah)"
        let surahPostEscape = surahPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{surah}", with: surahPostEscape, options: .literal, range: nil)
        let editionPreEscape = "\(edition)"
        let editionPostEscape = editionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{edition}", with: editionPostEscape, options: .literal, range: nil)
        let URLString = HafazQuranClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SurahResponse>.Type = HafazQuranClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns the list of Surahs in the Quran
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSurahList(completion: @escaping ((_ data: SurahListResponse?,_ error: Error?) -> Void)) {
        getSurahListWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Returns the list of Surahs in the Quran
     
     - returns: Observable<SurahListResponse>
     */
    open class func getSurahList() -> Observable<SurahListResponse> {
        return Observable.create { observer -> Disposable in
            getSurahList() { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Returns the list of Surahs in the Quran
     - GET /surah
     - 
     - examples: [{contentType=application/json, example={
  "code" : 0,
  "data" : [ {
    "number" : 6,
    "englishName" : "englishName",
    "numberOfAyahs" : 1,
    "revelationType" : "revelationType",
    "name" : "name",
    "englishNameTranslation" : "englishNameTranslation"
  }, {
    "number" : 6,
    "englishName" : "englishName",
    "numberOfAyahs" : 1,
    "revelationType" : "revelationType",
    "name" : "name",
    "englishNameTranslation" : "englishNameTranslation"
  } ],
  "status" : "status"
}}]

     - returns: RequestBuilder<SurahListResponse> 
     */
    open class func getSurahListWithRequestBuilder() -> RequestBuilder<SurahListResponse> {
        let path = "/surah"
        let URLString = HafazQuranClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SurahListResponse>.Type = HafazQuranClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}

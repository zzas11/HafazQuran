//
// EditionAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class EditionAPI {
    /**
     Lists all available editions.
     
     - parameter format: (query) Specify a format. &#39;text&#39; or &#39;audio (optional)
     - parameter language: (query) A 2 digit language code. Example: &#39;en&#39;, &#39;fr&#39;, etc. (optional)
     - parameter type: (query) A valid type. Example - &#39;versebyverse&#39;, &#39;translation&#39; etc. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEdition(format: String? = nil, language: String? = nil, type: String? = nil, completion: @escaping ((_ data: EditionResponse?,_ error: Error?) -> Void)) {
        getEditionWithRequestBuilder(format: format, language: language, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Lists all available editions.
     
     - parameter format: (query) Specify a format. &#39;text&#39; or &#39;audio (optional)
     - parameter language: (query) A 2 digit language code. Example: &#39;en&#39;, &#39;fr&#39;, etc. (optional)
     - parameter type: (query) A valid type. Example - &#39;versebyverse&#39;, &#39;translation&#39; etc. (optional)
     - returns: Observable<EditionResponse>
     */
    open class func getEdition(format: String? = nil, language: String? = nil, type: String? = nil) -> Observable<EditionResponse> {
        return Observable.create { observer -> Disposable in
            getEdition(format: format, language: language, type: type) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Lists all available editions.
     - GET /edition
     - 
     - examples: [{contentType=application/json, example={
  "code" : 0,
  "data" : [ {
    "identifier" : "identifier",
    "englishName" : "englishName",
    "name" : "name",
    "format" : "format",
    "language" : "language",
    "type" : "type"
  }, {
    "identifier" : "identifier",
    "englishName" : "englishName",
    "name" : "name",
    "format" : "format",
    "language" : "language",
    "type" : "type"
  } ],
  "status" : "status"
}}]
     
     - parameter format: (query) Specify a format. &#39;text&#39; or &#39;audio (optional)
     - parameter language: (query) A 2 digit language code. Example: &#39;en&#39;, &#39;fr&#39;, etc. (optional)
     - parameter type: (query) A valid type. Example - &#39;versebyverse&#39;, &#39;translation&#39; etc. (optional)

     - returns: RequestBuilder<EditionResponse> 
     */
    open class func getEditionWithRequestBuilder(format: String? = nil, language: String? = nil, type: String? = nil) -> RequestBuilder<EditionResponse> {
        let path = "/edition"
        let URLString = HafazQuranClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format, 
            "language": language, 
            "type": type
        ])

        let requestBuilder: RequestBuilder<EditionResponse>.Type = HafazQuranClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Lists all editions for a given format
     
     - parameter format: (path) Format can be &#39;audio&#39; or &#39;text&#39; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEditionByFormat(format: String, completion: @escaping ((_ data: EditionResponse?,_ error: Error?) -> Void)) {
        getEditionByFormatWithRequestBuilder(format: format).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Lists all editions for a given format
     
     - parameter format: (path) Format can be &#39;audio&#39; or &#39;text&#39; 
     - returns: Observable<EditionResponse>
     */
    open class func getEditionByFormat(format: String) -> Observable<EditionResponse> {
        return Observable.create { observer -> Disposable in
            getEditionByFormat(format: format) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Lists all editions for a given format
     - GET /edition/format/{format}
     - 
     - examples: [{contentType=application/json, example={
  "code" : 0,
  "data" : [ {
    "identifier" : "identifier",
    "englishName" : "englishName",
    "name" : "name",
    "format" : "format",
    "language" : "language",
    "type" : "type"
  }, {
    "identifier" : "identifier",
    "englishName" : "englishName",
    "name" : "name",
    "format" : "format",
    "language" : "language",
    "type" : "type"
  } ],
  "status" : "status"
}}]
     
     - parameter format: (path) Format can be &#39;audio&#39; or &#39;text&#39; 

     - returns: RequestBuilder<EditionResponse> 
     */
    open class func getEditionByFormatWithRequestBuilder(format: String) -> RequestBuilder<EditionResponse> {
        var path = "/edition/format/{format}"
        let formatPreEscape = "\(format)"
        let formatPostEscape = formatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{format}", with: formatPostEscape, options: .literal, range: nil)
        let URLString = HafazQuranClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EditionResponse>.Type = HafazQuranClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Lists all editions for a given language
     
     - parameter language: (path) A 2 digit language code. Example: en for English, fr for French, ar for Arabic 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEditionByLanguage(language: String, completion: @escaping ((_ data: EditionResponse?,_ error: Error?) -> Void)) {
        getEditionByLanguageWithRequestBuilder(language: language).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Lists all editions for a given language
     
     - parameter language: (path) A 2 digit language code. Example: en for English, fr for French, ar for Arabic 
     - returns: Observable<EditionResponse>
     */
    open class func getEditionByLanguage(language: String) -> Observable<EditionResponse> {
        return Observable.create { observer -> Disposable in
            getEditionByLanguage(language: language) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Lists all editions for a given language
     - GET /edition/language/{language}
     - 
     - examples: [{contentType=application/json, example={
  "code" : 0,
  "data" : [ {
    "identifier" : "identifier",
    "englishName" : "englishName",
    "name" : "name",
    "format" : "format",
    "language" : "language",
    "type" : "type"
  }, {
    "identifier" : "identifier",
    "englishName" : "englishName",
    "name" : "name",
    "format" : "format",
    "language" : "language",
    "type" : "type"
  } ],
  "status" : "status"
}}]
     
     - parameter language: (path) A 2 digit language code. Example: en for English, fr for French, ar for Arabic 

     - returns: RequestBuilder<EditionResponse> 
     */
    open class func getEditionByLanguageWithRequestBuilder(language: String) -> RequestBuilder<EditionResponse> {
        var path = "/edition/language/{language}"
        let languagePreEscape = "\(language)"
        let languagePostEscape = languagePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{language}", with: languagePostEscape, options: .literal, range: nil)
        let URLString = HafazQuranClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EditionResponse>.Type = HafazQuranClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Lists all editions for a given type
     
     - parameter type: (path) Type can be &#39;translation&#39;, &#39;tafsir&#39; or another result returned in /edition/type 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEditionByType(type: String, completion: @escaping ((_ data: EditionResponse?,_ error: Error?) -> Void)) {
        getEditionByTypeWithRequestBuilder(type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Lists all editions for a given type
     
     - parameter type: (path) Type can be &#39;translation&#39;, &#39;tafsir&#39; or another result returned in /edition/type 
     - returns: Observable<EditionResponse>
     */
    open class func getEditionByType(type: String) -> Observable<EditionResponse> {
        return Observable.create { observer -> Disposable in
            getEditionByType(type: type) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Lists all editions for a given type
     - GET /edition/type/{type}
     - 
     - examples: [{contentType=application/json, example={
  "code" : 0,
  "data" : [ {
    "identifier" : "identifier",
    "englishName" : "englishName",
    "name" : "name",
    "format" : "format",
    "language" : "language",
    "type" : "type"
  }, {
    "identifier" : "identifier",
    "englishName" : "englishName",
    "name" : "name",
    "format" : "format",
    "language" : "language",
    "type" : "type"
  } ],
  "status" : "status"
}}]
     
     - parameter type: (path) Type can be &#39;translation&#39;, &#39;tafsir&#39; or another result returned in /edition/type 

     - returns: RequestBuilder<EditionResponse> 
     */
    open class func getEditionByTypeWithRequestBuilder(type: String) -> RequestBuilder<EditionResponse> {
        var path = "/edition/type/{type}"
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = HafazQuranClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EditionResponse>.Type = HafazQuranClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Lists all formats
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEditionFormats(completion: @escaping ((_ data: EditionListResponse?,_ error: Error?) -> Void)) {
        getEditionFormatsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Lists all formats
     
     - returns: Observable<EditionListResponse>
     */
    open class func getEditionFormats() -> Observable<EditionListResponse> {
        return Observable.create { observer -> Disposable in
            getEditionFormats() { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Lists all formats
     - GET /edition/format
     - examples: [{contentType=application/json, example={
  "code" : 0,
  "data" : [ "data", "data" ],
  "status" : "status"
}}]

     - returns: RequestBuilder<EditionListResponse> 
     */
    open class func getEditionFormatsWithRequestBuilder() -> RequestBuilder<EditionListResponse> {
        let path = "/edition/format"
        let URLString = HafazQuranClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EditionListResponse>.Type = HafazQuranClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEditionLanguages(completion: @escaping ((_ data: EditionListResponse?,_ error: Error?) -> Void)) {
        getEditionLanguagesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**

     - returns: Observable<EditionListResponse>
     */
    open class func getEditionLanguages() -> Observable<EditionListResponse> {
        return Observable.create { observer -> Disposable in
            getEditionLanguages() { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - GET /edition/language
     - examples: [{contentType=application/json, example={
  "code" : 0,
  "data" : [ "data", "data" ],
  "status" : "status"
}}]

     - returns: RequestBuilder<EditionListResponse> 
     */
    open class func getEditionLanguagesWithRequestBuilder() -> RequestBuilder<EditionListResponse> {
        let path = "/edition/language"
        let URLString = HafazQuranClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EditionListResponse>.Type = HafazQuranClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Lists all types of editions
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEditionTypes(completion: @escaping ((_ data: EditionListResponse?,_ error: Error?) -> Void)) {
        getEditionTypesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Lists all types of editions
     
     - returns: Observable<EditionListResponse>
     */
    open class func getEditionTypes() -> Observable<EditionListResponse> {
        return Observable.create { observer -> Disposable in
            getEditionTypes() { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Lists all types of editions
     - GET /edition/type
     - examples: [{contentType=application/json, example={
  "code" : 0,
  "data" : [ "data", "data" ],
  "status" : "status"
}}]

     - returns: RequestBuilder<EditionListResponse> 
     */
    open class func getEditionTypesWithRequestBuilder() -> RequestBuilder<EditionListResponse> {
        let path = "/edition/type"
        let URLString = HafazQuranClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EditionListResponse>.Type = HafazQuranClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
